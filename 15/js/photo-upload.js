import { handleDocumentKeydown, closeOverlay } from './util.js';

const HASHTAGS_MAX_COUNT = 5;
const DESCRIPTION_MAX_LENGTH = 140;
const EFFECTS = {
  none: { filter: 'none', min: 0, max: 100, step: 1, unit: '' },
  chrome: { filter: 'grayscale', min: 0, max: 1, step: 0.1, unit: '' },
  sepia: { filter: 'sepia', min: 0, max: 1, step: 0.1, unit: '' },
  marvin: { filter: 'invert', min: 0, max: 100, step: 1, unit: '%' },
  phobos: { filter: 'blur', min: 0, max: 3, step: 0.1, unit: 'px' },
  heat: { filter: 'brightness', min: 1, max: 3, step: 0.1, unit: '' },
};

const uploadPhotoOverlay = document.querySelector('.img-upload__overlay');
const uploadCancel = uploadPhotoOverlay.querySelector('#upload-cancel');
const uploadImageForm = document.querySelector('.img-upload__form');

const smallerScaleButton = uploadImageForm.querySelector('.scale__control--smaller');
const biggerScaleButton = uploadImageForm.querySelector('.scale__control--bigger');
const scaleValueElement = uploadImageForm.querySelector('.scale__control--value');
const previewImage = uploadPhotoOverlay.querySelector('.img-upload__preview img');

const effectLevelSlider = document.querySelector('.effect-level__slider');
const effectLevelValue = document.querySelector('.effect-level__value');
const effectLevelContainer = document.querySelector('.img-upload__effect-level');
const effectsInputs = uploadPhotoOverlay.querySelectorAll('.effects__list input');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–∞–π–¥–µ—Ä–∞
noUiSlider.create(effectLevelSlider, {
  range: {
    min: 0,
    max: 100
  },
  start: 100,
  step: 1,
  connect: 'lower',
});

// –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–ª–∞–π–¥–µ—Ä–∞ –∏–∑–º–µ–Ω—è–µ–º –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–æ–≤
effectLevelSlider.noUiSlider.on('change', () => {
  const currentEffect = EFFECTS[uploadImageForm.querySelector('.effects__radio:checked').value];
  const currentValue = effectLevelSlider.noUiSlider.get();
  previewImage.style.filter = `${currentEffect.filter}(${currentValue}${currentEffect.unit})`;
  effectLevelValue.value = parseFloat(currentValue);
});

// –ü—Ä–∏ –∫–ª–∏–∫–µ –ø–æ –∫–Ω–æ–ø–∫–∞–º —Ñ–∏–ª—å—Ç—Ä–æ–≤ —É—Ä–æ–≤–µ–Ω—å –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç–∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –¥–æ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è (100%): —Å–ª–∞–π–¥–µ—Ä, —Ñ–∏–ª—å—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è, –∞ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω "–û—Ä–∏–≥–∏–Ω–∞–ª" ‚Äî —Ñ–∏–ª—å—Ç—Ä —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è, –∞ —Å–ª–∞–π–¥–µ—Ä —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è
// TODO: –£–∑–Ω–∞—Ç—å, –∫–∞–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –≤ –ø–æ–ª–µ, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ñ–∏–ª—å—Ç—Ä "–û—Ä–∏–≥–∏–Ω–∞–ª"
uploadPhotoOverlay.querySelector('.effects__list').addEventListener('click', (event) => {
  const target = event.target;
  if (target.classList.contains('effects__radio')) {
    const targetValue = target.value;
    if (targetValue !== 'none') {
      effectLevelContainer.style.display = 'block';
      effectLevelSlider.noUiSlider.updateOptions({
        range: {
          min: EFFECTS[targetValue].min,
          max: EFFECTS[targetValue].max,
        },
        start: EFFECTS[targetValue].max,
        step: EFFECTS[targetValue].step,
      });
      previewImage.style.filter = `${EFFECTS[targetValue].filter}(${EFFECTS[targetValue].max}${EFFECTS[targetValue].unit})`;
      effectLevelValue.value = parseFloat(EFFECTS[targetValue].max);
    } else {
      previewImage.style.filter = 'none';
      effectLevelContainer.style.display = 'none';
    }
  }
});


// TODO: –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–∫–∞–º —Å–∫–µ–π–ª–∞ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
/**
 * –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å–∫–µ–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è-–ø—Ä–µ–≤—å—é
 */
function handleUpScale () {
  const scaleValue = parseInt(scaleValueElement.value, 10);
  if (scaleValue < 100) {
    const newScaleValue = scaleValue + 25;
    scaleValueElement.value = `${newScaleValue}%`;
    previewImage.style.transform = `scale(${newScaleValue / 100})`;
  }
}

/**
 * –£–º–µ–Ω—å—à–∞–µ—Ç —Å–∫–µ–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è-–ø—Ä–µ–≤—å—é
 */
function handleDownScale () {
  const scaleValue = parseInt(scaleValueElement.value, 10);
  if (scaleValue > 25) {
    const newScaleValue = scaleValue - 25;
    scaleValueElement.value = `${newScaleValue}%`;
    previewImage.style.transform = `scale(${newScaleValue / 100})`;
  }
}

biggerScaleButton.addEventListener('click', handleUpScale);
smallerScaleButton.addEventListener('click', handleDownScale);

document.addEventListener('keydown', (evt) => handleDocumentKeydown(evt, uploadPhotoOverlay));
uploadCancel.addEventListener('click', () => {
  closeOverlay(uploadPhotoOverlay);

  document.querySelector('.img-upload__preview img').style.transform = 'scale(1)';
  uploadPhotoOverlay.querySelector('.text__hashtags').value = '';
  uploadPhotoOverlay.querySelector('.text__description').value = '';

  // TODO: –£–∑–Ω–∞—Ç—å –º–æ–∂–Ω–æ –ª–∏ –ø—Ä–æ—Å—Ç–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ "–û—Ä–∏–≥–∏–Ω–∞–ª" –∏–ª–∏ —ç—Ç–æ –∫–æ—Å—Ç—ã–ª—å
  effectsInputs.forEach((input) => {
    input.checked = input.id === 'effect-none';
  });

  previewImage.style.filter = 'none';
  effectLevelContainer.style.display = 'none';

});

// –ü–æ–∫–∞ —á—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é, –ø–æ—Ç–æ–º –º–æ–¥—É–ª—å –±—É–¥–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ —Å–µ—Ç–∫—É (–∏–ª–∏ –Ω–µ—Ç ü§°)
function handleUploadPhoto() {
  uploadPhotoOverlay.classList.remove('hidden');
  document.body.classList.add('modal-open');
}

const pristine = new Pristine(uploadImageForm, {
  classTo: 'img-upload__field-wrapper',
  errorClass: 'img-upload__field-wrapper--invalid',
  successClass: 'img-upload__field-wrapper--valid',
  errorTextParent: 'img-upload__field-wrapper',
  errorTextTag: 'div',
  errorTextClass: 'img-upload__field-wrapper--error',
});

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ö–µ—à—Ç–µ–≥–∏ –≤ input.text__hashtags –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏—è–º:
 * - —Ö—ç—à—Ç–µ–≥ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Å–∏–º–≤–æ–ª–∞ # (—Ä–µ—à—ë—Ç–∫–∞);
 * - —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ —Ä–µ—à—ë—Ç–∫–∏ –¥–æ–ª–∂–Ω–∞ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –±—É–∫–≤ –∏ —á–∏—Å–µ–ª –∏ –Ω–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–±–µ–ª—ã, —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã (#, @, $ –∏ —Ç. –ø.), —Å–∏–º–≤–æ–ª—ã –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏ (—Ç–∏—Ä–µ, –¥–µ—Ñ–∏—Å, –∑–∞–ø—è—Ç–∞—è –∏ —Ç. –ø.), —ç–º–æ–¥–∑–∏ –∏ —Ç. –¥.;
 * - —Ö–µ—à-—Ç–µ–≥ –Ω–µ –º–æ–∂–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –æ–¥–Ω–æ–π —Ä–µ—à—ë—Ç–∫–∏;
 * - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ–¥–Ω–æ–≥–æ —Ö—ç—à—Ç–µ–≥–∞ 20 —Å–∏–º–≤–æ–ª–æ–≤, –≤–∫–ª—é—á–∞—è —Ä–µ—à—ë—Ç–∫—É;
 * - —Ö—ç—à—Ç–µ–≥–∏ –Ω–µ—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É: #–•—ç—à–¢–µ–≥ –∏ #—Ö—ç—à—Ç–µ–≥ —Å—á–∏—Ç–∞—é—Ç—Å—è –æ–¥–Ω–∏–º –∏ —Ç–µ–º –∂–µ —Ç–µ–≥–æ–º;
 * - —Ö—ç—à—Ç–µ–≥–∏ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã.
 * @param {*} value - –ó–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º–æ–≥–æ input
 * @returns {boolean} - true, –µ—Å–ª–∏ —á–∏—Å–ª–æ —Ö–µ—à—Ç–µ–≥–æ–≤ —Ä–∞–≤–Ω–æ –∏–ª–∏ –º–µ–Ω–µ–µ HASHTAGS_MAX_COUNT
 */
function validateHashtags(value) {
  value = value.trim();

  if (value === '') {
    return true;
  }

  const hashtags = value.split(' ');
  const RegExp = /^#[a-z–∞-—è—ë0-9]{1,19}$/i;

  const allValid = hashtags.every((el) => RegExp.test(el));

  if (!allValid) {
    return false;
  }

  return true;
}

pristine.addValidator(uploadImageForm.querySelector('.text__hashtags'), validateHashtags, '–í–≤–µ–¥—ë–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ö—ç—à—Ç–µ–≥', 1);

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–µ—à—Ç–µ–≥–æ–≤ –≤ input.text__hashtags
 * @param {string} value - –ó–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º–æ–≥–æ input
 * @returns {boolean} - true, –µ—Å–ª–∏ —á–∏—Å–ª–æ —Ö–µ—à—Ç–µ–≥–æ–≤ —Ä–∞–≤–Ω–æ –∏–ª–∏ –º–µ–Ω–µ–µ HASHTAGS_MAX_COUNT
 */
function checkHashtagsCount (value) {
  value = value.trim();

  const hashtags = value.split(' ');

  return hashtags.length <= HASHTAGS_MAX_COUNT;
}

pristine.addValidator(uploadImageForm.querySelector('.text__hashtags'), checkHashtagsCount, '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö—ç—à—Ç–µ–≥–æ–≤', 2);

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Ö–µ—à—Ç–µ–≥–æ–≤ –≤ input.text__hashtags
 * @param {string} value - –ó–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º–æ–≥–æ input
 * @returns {boolean} - true, –µ—Å–ª–∏ –≤—Å–µ —Ö–µ—à—Ç–µ–≥–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã
 */
function checkHashtagsUnique (value) {
  value = value.trim();
  const hashtags = value.split(' ');
  const uniqueHashtags = new Set(hashtags.map((tag) => tag.toLowerCase()));

  return uniqueHashtags.size === hashtags.length;
}

pristine.addValidator(uploadImageForm.querySelector('.text__hashtags'), checkHashtagsUnique, '–•—ç—à—Ç–µ–≥–∏ –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è', 3);

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–ª–∏–Ω—É –∑–Ω–∞—á–µ–Ω–∏—è textarea.text__description
 * @param {string} value ‚Äî –ó–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º–æ–≥–æ textarea
 * @returns {boolean} - true, –µ—Å–ª–∏ –¥–ª–∏–Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–∞ DESCRIPTION_MAX_LENGTH
 */
function checkDescriptionLength (value) {
  value = value.trim();
  return value.length <= DESCRIPTION_MAX_LENGTH;
}

pristine.addValidator(uploadImageForm.querySelector('.text__description'), checkDescriptionLength, '–î–ª–∏–Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –±–æ–ª—å—à–µ 140 —Å–∏–º–≤–æ–ª–æ–≤');

uploadImageForm.addEventListener('submit', (evt) => {
  evt.preventDefault();
  if (!pristine.validate()) {
    throw new Error('–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞');
  }
});

export { handleUploadPhoto };
